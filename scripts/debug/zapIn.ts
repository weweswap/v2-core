import hre, { ethers } from "hardhat";
import * as deployment from "../../deployments/base/ZapKyber.json";

const erc20ABI = [
  "function approve(address spender, uint256 amount) external returns (bool)",
];

async function main() {
  const privateKey = process.env.PK_LP;
  const alchemyId = process.env.ALCHEMY_ID;
  if (!privateKey) {
    throw new Error("Private key is not defined");
  }
  if (!alchemyId) {
    throw new Error("Alchemy Id is not defined");
  }

  const provider = new ethers.providers.JsonRpcProvider(
    `https://base-mainnet.g.alchemy.com/v2/${alchemyId}`
  );

  const wallet = new ethers.Wallet(privateKey, provider);

  const contractAddress = (await hre.ethers.getContract("ZapKyber")).address;
  const contractABI = deployment.abi;

  const contract = new ethers.Contract(contractAddress, contractABI, wallet);

  const amountToApprove = ethers.utils.parseUnits("3000000", 6);

  const tokenAddress = "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913";
  const tokenContract = new ethers.Contract(tokenAddress, erc20ABI, wallet);

  console.log("Aprobando el token...");
  const approveTx = await tokenContract.approve(
    contractAddress,
    amountToApprove
  );
  await approveTx.wait();
  console.log("Token aprobado con Ã©xito");

  console.log("Calling zapIn...");
  const tx = await contract.zapIn(
    "0x3Fd7957D9F98D46c755685B67dFD8505468A7Cb6",
    "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913",
    "3000000",
    "1000000000000000000",
    "0xe21fd0e9000000000000000000000000000000000000000000000000000000000000002000000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e854000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000000c0010100000029020000006f71796114b9cdaef29a801bc5cdbcb561990eeb0000000000000000000000000016e360010a833589fcd6edb6e08f4c7c32d4f71b54bda029136b9bb36519538e0c073894e964e90172e1c0b41f9377dabe42574cfb0ba202ed1a3a133c68fa1bfd000000000000000000000000670ff5f500000040000000000000000000000000000000000000000000000000000000000000000000000000000000000056dd526d39eee7000000000000052d729afb293daa7bb3000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000006b9bb36519538e0c073894e964e90172e1c0b41f000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000002000000000000000000000000009377dabe42574cfb0ba202ed1a3a133c68fa1bfd000000000000000000000000000000000000000000000000000000000016e3600000000000000000000000000000000000000000000004245baf2f5431552fc200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000100000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e8540000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000016e360000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022e7b22536f75726365223a22222c22416d6f756e74496e555344223a22312e34393939373336303235343538373837222c22416d6f756e744f7574555344223a22312e35303434303133373132383435303535222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a223234343530313934303836363836343339393330383033222c2254696d657374616d70223a313732393039383035332c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a225258625968455a6f494351486a7a524e476645696855726f7030434f334f6152673876427147307471304d696f7544694955546d64704b31332b627254342b644450466a725354536341666f4c7762717976714939574d78585139374256506c494e43436476454f477749735232744149574e56756a7a4b4c594f444c7658517848656e6346762f47314877376743612b34646c446f7571737839384a7377506c6c52536e496f4638456171632b6168367665394b6632614b5978667947496d414365647530313652516d455145674b42326a654c61705a4c43697a54547171513537355275504964513341576d6141426c624e6f49653448337256356c7157436d77796158784a5763502f3571773945644467724b71324f4e774d4d586c534a646863775770394e523761394968566d496671366355392f4a66764554582f315a6159526a7a366135363333764f4f6a48676335673d3d227d7d000000000000000000000000000000000000",
    "0xe21fd0e9000000000000000000000000000000000000000000000000000000000000002000000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e854000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000000c0010100000029020000006f71796114b9cdaef29a801bc5cdbcb561990eeb0000000000000000000000000016e360010a833589fcd6edb6e08f4c7c32d4f71b54bda029136b9bb36519538e0c073894e964e90172e1c0b41f9377dabe42574cfb0ba202ed1a3a133c68fa1bfd000000000000000000000000670ff5f500000040000000000000000000000000000000000000000000000000000000000000000000000000000000000056dd526d39eee7000000000000052d729afb293daa7bb3000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000006b9bb36519538e0c073894e964e90172e1c0b41f000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000002000000000000000000000000009377dabe42574cfb0ba202ed1a3a133c68fa1bfd000000000000000000000000000000000000000000000000000000000016e3600000000000000000000000000000000000000000000004245baf2f5431552fc200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000100000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e8540000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000016e360000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022e7b22536f75726365223a22222c22416d6f756e74496e555344223a22312e34393939373336303235343538373837222c22416d6f756e744f7574555344223a22312e35303434303133373132383435303535222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a223234343530313934303836363836343339393330383033222c2254696d657374616d70223a313732393039383035332c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a225258625968455a6f494351486a7a524e476645696855726f7030434f334f6152673876427147307471304d696f7544694955546d64704b31332b627254342b644450466a725354536341666f4c7762717976714939574d78585139374256506c494e43436476454f477749735232744149574e56756a7a4b4c594f444c7658517848656e6346762f47314877376743612b34646c446f7571737839384a7377506c6c52536e496f4638456171632b6168367665394b6632614b5978667947496d414365647530313652516d455145674b42326a654c61705a4c43697a54547171513537355275504964513341576d6141426c624e6f49653448337256356c7157436d77796158784a5763502f3571773945644467724b71324f4e774d4d586c534a646863775770394e523761394968566d496671366355392f4a66764554582f315a6159526a7a366135363333764f4f6a48676335673d3d227d7d000000000000000000000000000000000000"
  );

  console.log("Broadcasted...");
  await tx.wait();

  console.log("Tx hash:", tx.hash);
}

// Manejar errores
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
