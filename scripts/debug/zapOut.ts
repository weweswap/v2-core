import hre, { ethers } from "hardhat";
import * as deployment from "../../deployments/base/ZapKyber.json";

const erc20ABI = [
  "function approve(address spender, uint256 amount) external returns (bool)",
];

async function main() {
  const privateKey = process.env.PK_LP;
  const alchemyId = process.env.ALCHEMY_ID;
  if (!privateKey) {
    throw new Error("Private key is not defined");
  }
  if (!alchemyId) {
    throw new Error("Alchemy Id is not defined");
  }

  const provider = new ethers.providers.JsonRpcProvider(
    `https://base-mainnet.g.alchemy.com/v2/${alchemyId}`
  );

  const wallet = new ethers.Wallet(privateKey, provider);

  const address = await wallet.getAddress();
  console.log("Wallet address", address);

  const contractAddress = (await hre.ethers.getContract("ZapKyber")).address;
  const contractABI = deployment.abi;

  const contract = new ethers.Contract(contractAddress, contractABI, wallet);

  const sharesToBurn = "1000000000000000000";
  // const amountToApprove = ethers.utils.parseUnits("1000000000000000000", 18);

  const vaultAddress = "0x3Fd7957D9F98D46c755685B67dFD8505468A7Cb6";
  const vaultContract = new ethers.Contract(vaultAddress, erc20ABI, wallet);

  console.log("Aprobando el token...");
  const approveTx = await vaultContract.approve(contractAddress, sharesToBurn);

  await approveTx.wait();
  console.log("Token aprobado con Ã©xito");

  console.log("Calling zapOut...");
  const tx = await contract.zapOut(
    vaultAddress,
    sharesToBurn,
    "0x6b9bb36519538e0C073894E964E90172E1c0B41F",
    "0xe21fd0e9000000000000000000000000000000000000000000000000000000000000002000000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e854000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000fe010200000029020000005e9bb3d7682a9537db831060176c4247ab80d1ec00000000000001b1ae4d6e2ef5000000010a00000039000000ba12222222228d8ba445958a75a0704d566bf2c8dad0cf7940078ec8537df85e9499fb235d32c3d100020000000000000000006f01010b6b9bb36519538e0c073894e964e90172e1c0b41f833589fcd6edb6e08f4c7c32d4f71b54bda029139377dabe42574cfb0ba202ed1a3a133c68fa1bfd0000000000000000000000006710ec1f0000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000069af800000000000000000000000000006b9bb36519538e0c073894e964e90172e1c0b41f000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000002000000000000000000000000009377dabe42574cfb0ba202ed1a3a133c68fa1bfd0000000000000000000000000000000000000000000001b1ae4d6e2ef500000000000000000000000000000000000000000000000000000000000000000548c600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000100000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e85400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000001b1ae4d6e2ef5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021d7b22536f75726365223a22222c22416d6f756e74496e555344223a22302e34333032333137363331333737333234222c22416d6f756e744f7574555344223a22302e34333333343435323039383239333537222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a22343332383838222c2254696d657374616d70223a313732393136313037312c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a226177375a79596f6a4a4f775158427754636768464444576c7a764f79435635426365694d75633745783631334a656c4f7957583670497478774a423856645a3167667a7065614236307756306c706e7662596254526774505058726d6c6f4d656f6d6a6a70357a6633434777496d3376546f326d324150536e38483674636a413163486445534d36514f6169676e37362b7459345a556d457a7066497072655366427135584d386a6f584f384a7952787559554539537946765459626b78356c532b4b7a384b737a4862527632336f362b5a6839646848415141335751644754304650685369496c75307144727a2f356c624542362b4554307564505347686372735a7275764964784f6a4c336479455a6e477232364b424e367557416a6a5a613271326b7048776c686f6e567130534147496f37366657373735574555792b41754a324a462b48794561325946624a7a48734372773d3d227d7d000000",
    {
      gasLimit: ethers.utils.hexlify(1000000), 
      maxFeePerGas: ethers.utils.parseUnits("62702908", "wei"),
      maxPriorityFeePerGas: ethers.utils.parseUnits("62702908", "wei"),
    }
  );

  console.log("Broadcasted...");
  await tx.wait();

  console.log("Tx hash:", tx.hash);
}

main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
