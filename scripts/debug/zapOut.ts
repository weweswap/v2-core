import hre, { ethers } from "hardhat";
import * as deployment from "../../deployments/base/ZapKyber.json";

const erc20ABI = [
  "function approve(address spender, uint256 amount) external returns (bool)",
];

async function main() {
  const privateKey = process.env.PK_LP;
  const alchemyId = process.env.ALCHEMY_ID;
  if (!privateKey) {
    throw new Error("Private key is not defined");
  }
  if (!alchemyId) {
    throw new Error("Alchemy Id is not defined");
  }

  const provider = new ethers.providers.JsonRpcProvider(
    `https://base-mainnet.g.alchemy.com/v2/${alchemyId}`
  );

  const wallet = new ethers.Wallet(privateKey, provider);

  const address = await wallet.getAddress();
  console.log("Wallet address", address);

  const contractAddress = (await hre.ethers.getContract("ZapKyber")).address;
  const contractABI = deployment.abi;

  const contract = new ethers.Contract(contractAddress, contractABI, wallet);

  const sharesToBurn = "1000000000000000000";
  // const amountToApprove = ethers.utils.parseUnits("1000000000000000000", 18);

  const vaultAddress = "0x3Fd7957D9F98D46c755685B67dFD8505468A7Cb6";
  const vaultContract = new ethers.Contract(vaultAddress, erc20ABI, wallet);

  console.log("Aprobando el token...");
  const approveTx = await vaultContract.approve(contractAddress, sharesToBurn);

  await approveTx.wait();
  console.log("Token aprobado con Ã©xito");

  console.log("Calling zapOut...");
  const tx = await contract.zapOut(
    vaultAddress,
    sharesToBurn,
    "0x6b9bb36519538e0C073894E964E90172E1c0B41F",
    "0xe21fd0e9000000000000000000000000000000000000000000000000000000000000002000000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e854000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000000c0010100000029020000006f71796114b9cdaef29a801bc5cdbcb561990eeb00000000000001b1ae4d6e2ef5000000010a6b9bb36519538e0c073894e964e90172e1c0b41f833589fcd6edb6e08f4c7c32d4f71b54bda029139377dabe42574cfb0ba202ed1a3a133c68fa1bfd000000000000000000000000670feece00000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000757060000000000000000000000006b9bb36519538e0c073894e964e90172e1c0b41f000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000002000000000000000000000000009377dabe42574cfb0ba202ed1a3a133c68fa1bfd0000000000000000000000000000000000000000000001b1ae4d6e2ef5000000000000000000000000000000000000000000000000000000000000000005df3800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000100000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e85400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000001b1ae4d6e2ef5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021e7b22536f75726365223a22222c22416d6f756e74496e555344223a22302e34373938323936343037333039383637222c22416d6f756e744f7574555344223a22302e3438313137353338313031373631353736222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a22343831303330222c2254696d657374616d70223a313732393039363232322c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a224577524f736b4c5467652f753551624d6d435a717146354d5150597735646a42536e6d6d324866516e4e74586f524c62433234476441395652786b394730344c70442f7877704b79387637324d39387a503556514164353276687775423557376f6a787646504c59307a726c4e684a4a367562467164334e374b6435537837317351317a6d437a4754634551645746444651366b3566577651775073614b7855617468796267386a3148454e5244514f783378536631614433693350337a6c763258415a47684741616d2f466d3741423875576b3762694f336c6763365270414257715645306658342f4c2f75333052794d6a6e57384c71594156796263342f744c794a2b5a67754d51427358394c73344b4a5552553838764836626d4964332f2f41546c636b6b6d39735034426648342f2b72794c59754c345831754673624178585762347a65394b54424f4474433161415171673d3d227d7d0000"
  );

  console.log("Broadcasted...");
  await tx.wait();

  console.log("Tx hash:", tx.hash);
}

// Manejar errores
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
